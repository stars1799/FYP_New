---
title: "Geospatial Analysis using OneMap Data"
execute: 
  warning: false
date: "`r Sys.Date()`"
code: false
---

# Data Analysis

```{r}
pacman::p_load(arrow, lubridate, maptools, sp, sf, raster, spatstat, tmap, classInt, viridis, tidyverse, spNetwork)
```

Reading shapefiles that were exported from our qgis geopackage:

```{r}
pg_wdl <- st_read(dsn = "data/geospatial", 
                 layer = "pg_wdl")
amk_wdl <- st_read(dsn = "data/geospatial", 
                 layer = "wdl_amk")
```

```{r}
dl_pg <- st_read(dsn = "data/geospatial", 
                 layer = "pg_dl")
dl_amk <- st_read(dsn = "data/geospatial", 
                 layer = "dl_amk")
```

```{r}
#| echo: false
plot(dl_amk)
```

```{r}
#| echo: false
edl_pg_points <- st_centroid(dl_pg, n = 10)
plot(edl_pg_points)
```

```{r}
#| echo: false
edl_amk_points <- st_centroid(dl_amk, n = 10)
plot(edl_amk_points)
```

```{r}
#| echo: false
# Define colors based on the value of the "fclass" column
line_colors <- ifelse(pg_wdl$fclass == "dl", "red", "green")

dl_class <- pg_wdl["desired_li"]

# Plot with custom colors
plot(dl_class, col = line_colors, main = "Desired Lines in Punggol")
```

```{r}
library(ggplot2)
#install.packages("ggmap")
library(ggmap)
```

```{r}
#dl_map2 <- osm_basemap +
#  tm_shape(dl_class) +
#  tm_lines(line_colors)
#  tmap_options(check.and.fix = TRUE)

# View the map
#dl_map2
```

```{r}
target_buildings <- st_read(dsn = "data/geospatial", 
                 layer = "target_buildings")
```

```{r}
#| echo: false
st_crs(target_buildings)
```

```{r}
tb_cat <- target_buildings["Categorize"]
```

```{r}
#| echo: false
plot(tb_cat, key.width = lcm(6.32))
```

```{r}
#| echo: false
mpsz <- st_read(dsn = "data/geospatial/MPSZ", layer = "MPSZ-2019")
```

```{r}
#| echo: false
st_crs(mpsz)
```

```{r}
mpsz3414 <- st_transform(mpsz, 3414)
```

```{r}
#| echo: false
st_crs(mpsz3414)
```

```{r}
#| echo: false
plot(mpsz3414)
```

```{r}
#| echo: false
plot(st_geometry(mpsz3414))
```

```{r}
#| echo: false
plot(mpsz3414["PLN_AREA_N"])
```

```{r}
pa_mpsz <- mpsz3414["PLN_AREA_N"]
```

```{r}
mpsz2 <- as_Spatial(pa_mpsz)
```


```{r}
pg = mpsz2[mpsz2@data$PLN_AREA_N == "PUNGGOL",]
amk = mpsz2[mpsz2@data$PLN_AREA_N == "ANG MO KIO",]
```

```{r}
#| echo: false
par(mfrow=c(2,2), mar = c(4, 4, 2, 1))
plot(pg, main = "Punggol")
plot(amk, main = "Ang Mo Kio")
```

```{r}
pg_sp = as(pg, "SpatialPolygons")
amk_sp = as(amk, "SpatialPolygons")
```

```{r}
pg_owin = as(pg_sp, "owin")
amk_owin = as(amk_sp, "owin")
```

```{r}
edl_pg_points_sf <- st_as_sf(edl_pg_points)
```

```{r}
edl_coords <- st_coordinates(edl_pg_points_sf)

# Create an owin object from the coordinates
edl_pg_owin <- owin(xrange = range(edl_coords[,1]), yrange = range(edl_coords[,2]))
```

```{r}
edl_amk_points_sf <- st_as_sf(edl_amk_points)
```

```{r}
amk_edl_coords <- st_coordinates(edl_amk_points_sf)

# Create an owin object from the coordinates
edl_amk_owin <- owin(xrange = range(amk_edl_coords[,1]), yrange = range(amk_edl_coords[,2]))
```

```{r}
#| echo: false
edl_pg_ppp <- as.ppp(st_coordinates(edl_pg_points_sf), st_bbox(edl_pg_points_sf))
plot(edl_pg_ppp)
```

```{r}
#| echo: false
edl_amk_ppp <- as.ppp(st_coordinates(edl_amk_points_sf), st_bbox(edl_amk_points_sf))
plot(edl_amk_ppp)
```

```{r}
edl_pg_ppp = edl_pg_ppp[pg_owin]
edl_a_ppp = edl_amk_ppp[amk_owin]
```

```{r}
#| echo: false
par(mfrow=c(2,2))
par(mar = c(3,3,2,1))
plot(edl_pg_ppp, main= "Desired Lines Punggol")
```

```{r}
#| echo: false
plot(density(edl_pg_ppp,
             sigma=bw.CvL,
             edge=TRUE,
             kernel="gaussian"),
             main="Punggol Desired Lines CvL")
```

```{r}
#| echo: false
plot(density(edl_pg_ppp,
             sigma=bw.scott,
             edge=TRUE,
             kernel="gaussian"),
             main="Punggol Desired Lines scott")
```

```{r}
#| echo: false
plot(density(edl_pg_ppp,
             sigma=bw.diggle,
             edge=TRUE,
             kernel="gaussian"),
             main="Punggol Desired Lines diggle")
```

```{r}
#| echo: false
plot(density(edl_pg_ppp,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="gaussian"),
             main="Punggol Desired Lines ppl")
```

```{r}
class(pg)
```

```{r}
pg_sf <- st_as_sf(pg)
amk_sf <- st_as_sf(amk)
```

```{r}
pg_buildings <- st_intersection(pg_sf, tb_cat)
amk_buildings <- st_intersection(amk_sf, tb_cat)
```

```{r}
#| echo: false
pg_b_cat <- pg_buildings["Categorize"]
plot(pg_b_cat, key.width = lcm(6.32))
```

```{r}
#| echo: false
amk_b_cat <- amk_buildings["Categorize"]
plot(amk_b_cat, key.width = lcm(6.32))
```

```{r}
library(ggplot2)
#install.packages("ggmap")
library(ggmap)
```

```{r}
landuse_pg <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_target_landuse_PG")
landuse_amk <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_target_landuse_AMK")
```

```{r}
landuse_pg_desc <- (landuse_pg["descriptio"])
```

```{r}
plot(landuse_amk["descriptio"])
```

```{r}
plot(landuse_pg_desc)
```

```{r}
landuse_pg_sf <- st_as_sf(landuse_pg)
landuse_amk_sf <- st_as_sf(landuse_amk)
```

```{r}
landuse_pg_sf <- st_make_valid(landuse_pg_sf)
valid_pg <- st_make_valid(pg_sf)
valid_amk <- st_make_valid(amk_sf)
```

```{r}
pg_landuse <- st_intersection(valid_pg, landuse_pg_sf)
amk_landuse <- st_intersection(valid_amk, landuse_amk_sf)
```

```{r}
parks_pg <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_parks_PG")
parks_amk <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_parks_AMK")
healthcare_pg <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_healthcare_PG")
healthcare_amk <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_healthcare_AMK")
food_pg <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_foodplaces_PG")
food_amk <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_foodplaces_AMK")
smarket_pg <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_smarket_PG")
smarket_amk <- st_read(dsn = "data/geospatial", 
                 layer = "FYP_walkingtime_smarket_AMK")
```

```{r}
plot(food_pg)
```

```{r}
parks_pg_sf <- st_as_sf(parks_pg)
parks_amk_sf <- st_as_sf(parks_amk)
healthcare_pg_sf <- st_as_sf(healthcare_pg)
#healthcare_amk_sf <- st_as_sf(healthcare_amk)
food_pg_sf <- st_as_sf(food_pg)
food_amk_sf <- st_as_sf(food_amk)
smarket_pg_sf <- st_as_sf(smarket_pg)
smarket_amk_sf <- st_as_sf(smarket_amk)
```

```{r}
parks_pg_sf <- st_make_valid(parks_pg_sf)
parks_amk_sf <- st_make_valid(parks_amk_sf)
healthcare_pg_sf <- st_make_valid(healthcare_pg_sf)
#healthcare_amk_sf <- st_make_valid(healthcare_amk_sf)
food_pg_sf <- st_make_valid(food_pg_sf)
food_amk_sf <- st_make_valid(food_amk_sf)
smarket_pg_sf <- st_make_valid(smarket_pg_sf)
smarket_amk_sf <- st_make_valid(smarket_amk_sf)
```

```{r}
pg_parks <- st_intersection(valid_pg, parks_pg_sf)
pg_healthcare <- st_intersection(valid_pg, healthcare_pg_sf)
pg_food <- st_intersection(valid_pg, food_pg_sf)
pg_smarket <- st_intersection(valid_pg, smarket_pg_sf)

amk_parks <- st_intersection(valid_amk, parks_amk_sf)
#amk_healthcare <- st_intersection(valid_amk, healthcare_amk_sf)
amk_food <- st_intersection(valid_amk, food_amk_sf)
amk_smarket <- st_intersection(valid_amk, smarket_amk_sf)
```

# Punggol Buildings Chart

```{r}
pg_b_cat <- pg_buildings["Categorize"]
plot(pg_b_cat, key.width = lcm(6.32))
```

# Punggol Buildings Chart on OSM Layer

```{r}
tmap_mode('view')
# Define basemaps
osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")

# Plot pg_b_cat over OpenStreetMap basemap with color categorization and legend
pg_b_cat_map2 <- tm_shape(pg_b_cat) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "Categorize", title = "Building Category") +  # Color categorization
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
pg_b_cat_map2
```

# Ang Mo Kio Buildings Chart

```{r}
amk_b_cat <- amk_buildings["Categorize"]
plot(amk_b_cat, key.width = lcm(6.32))
```

# Ang Mo Kio Buildings Chart on OSM Layer

```{r}
# Plot pg_b_cat over OpenStreetMap basemap with color categorization and legend
amk_b_cat_map <- tm_shape(amk_b_cat) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "Categorize", title = "Building Category") +  # Color categorization
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
amk_b_cat_map
```

# Punggol Walkway Lines + Desired Lines on OSM Layer

```{r}
tmap_mode('view')

# Define basemaps
osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")

# Plot dl_class over OpenStreetMap basemap
dl_map <- osm_basemap +
  tm_shape(dl_class) +
  tm_lines(col = "red", lwd = 2) +  # Adjust line color and width as needed
  tmap_options(check.and.fix = TRUE)

# View the map
dl_map
```

# Ang Mo Kio Walkway Lines + Desired Lines on OSM Layer

```{r}
a_dl_class <- amk_wdl["desired_li"]
tmap_mode('view')

# Define basemaps
osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")

# Plot dl_class over OpenStreetMap basemap
dl_map <- osm_basemap +
  tm_shape(a_dl_class) +
  tm_lines(col = "red", lwd = 2) +  # Adjust line color and width as needed
  tmap_options(check.and.fix = TRUE)

# View the map
dl_map
```

# Punggol Desired Lines vs Walkway Lines

```{r}
# Define colors based on the value of the "fclass" column
line_colors <- ifelse(pg_wdl$fclass == "dl", "red", "green")

dl_class <- pg_wdl["desired_li"]

# Plot with custom colors
plot(dl_class, col = line_colors, main = "Desired Lines in Punggol")
```

# Ang Mo Kio Desired Lines vs Walkway Lines

```{r}
# Define colors based on the value of the "fclass" column
line_colors <- ifelse(amk_wdl$fclass == "dl", "red", "green")

a_dl_class <- amk_wdl["desired_li"]

# Plot with custom colors
plot(a_dl_class, col = line_colors, main = "Desired Lines in Ang Mo Kio")
```

# Punggol Desired Lines on OSM Layer

```{r}
tmap_mode('view')

# Define basemaps
osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")

# Plot dl_class over OpenStreetMap basemap
dl_map <- osm_basemap +
  tm_shape(dl_pg) +
  tm_lines(col = "red", lwd = 2) +  # Adjust line color and width as needed
  tmap_options(check.and.fix = TRUE)

# View the map
dl_map
```

# Ang Mo Kio Desired Lines on OSM Layer

```{r}
tmap_mode('view')

# Define basemaps
osm_basemap <- tm_basemap(server = "OpenStreetMap.HOT")
imagery_basemap <- tm_basemap(server = "Esri.WorldImagery")

# Plot dl_class over OpenStreetMap basemap
dl_map_amk <- osm_basemap +
  tm_shape(dl_amk) +
  tm_lines(col = "red", lwd = 2) +  # Adjust line color and width as needed
  tmap_options(check.and.fix = TRUE)

# View the map
dl_map_amk
```

# Punggol Kernel Density Estimation Graphs

```{r}
# Set up a 2x2 layout with reduced margins
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2))

# Chart 1
plot(density(edl_pg_ppp,
             sigma = bw.CvL,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Punggol Desired Lines CvL")

# Chart 2
plot(density(edl_pg_ppp,
             sigma = bw.scott,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Punggol Desired Lines scott")

# Chart 3
plot(density(edl_pg_ppp,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Punggol Desired Lines diggle")

# Chart 4
plot(density(edl_pg_ppp,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Punggol Desired Lines ppl")
```

# Ang Mo Kio Kernel Density Estimation Graphs

```{r}
# Set up a 2x2 layout with reduced margins
par(mfrow = c(2, 2), mar = c(2, 2, 2, 2))

# Chart 1
plot(density(edl_a_ppp,
             sigma = bw.CvL,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Ang Mo Kio Desired Lines CvL")

# Chart 2
plot(density(edl_a_ppp,
             sigma = bw.scott,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Ang Mo Kio Desired Lines scott")

# Chart 3
plot(density(edl_a_ppp,
             sigma = bw.diggle,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Ang Mo Kio Desired Lines diggle")

# Chart 4
plot(density(edl_amk_ppp,
             sigma = bw.ppl,
             edge = TRUE,
             kernel = "gaussian"),
     main = "Ang Mo Kio Desired Lines ppl")
```

# Punggol Landuse on OSM Layer

```{r}

# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
pg_landuse_map <- tm_shape(pg_landuse) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "Categorize", title = "Landuse Category", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
pg_landuse_map
```

# Ang Mo Kio Landuse on OSM Layer

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
amk_landuse_map <- tm_shape(amk_landuse) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "Categorize", title = "Landuse Category", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
amk_landuse_map
```

# Punggol Isotope Areas of Parks on OSM Layer (Key Amenities)

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
pg_parks_map <- tm_shape(pg_parks) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "cost_level", title = "Isotope Areas of Parks", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
pg_parks_map
```

# Punggol Isotope Areas of Healthcare on OSM Layer (Key Amenities)

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
pg_healthcare_map <- tm_shape(pg_healthcare) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "cost_level", title = "Isotope Areas of Healthcare", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
pg_healthcare_map
```

# Punggol Isotope Areas of Healthcare on OSM Layer (Key Amenities)

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
pg_food_map <- tm_shape(pg_food) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "cost_level", title = "Isotope Areas of Healthcare", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
pg_food_map
```

# Punggol Isotope Areas of Supermarkets on OSM Layer (Key Amenities)

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
pg_smarket_map <- tm_shape(pg_smarket) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "cost_level", title = "Isotope Areas of Supermarkets", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
pg_smarket_map
```

# Ang Mo Kio Isotope Areas of Parks on OSM Layer (Key Amenities)

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
amk_parks_map <- tm_shape(amk_parks) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "cost_level", title = "Isotope Areas of Parks", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
amk_parks_map
```

# Ang Mo Kio Isotope Areas of Supermarkets on OSM Layer (Key Amenities)

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
amk_smarket_map <- tm_shape(amk_smarket) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "cost_level", title = "Isotope Areas of Supermarkets", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
amk_smarket_map
```

# Ang Mo Kio Isotope Areas of Food Places on OSM Layer (Key Amenities)

```{r}
# Plot pg_landuse over OpenStreetMap basemap with color categorization, legend, and lower opacity
amk_food_map <- tm_shape(amk_food) +
  tm_borders() +  # Plot borders of the polygons
  tm_fill(col = "cost_level", title = "Isotope Areas of Food Places", alpha = 0.5) +  # Color categorization with lower opacity
  tm_layout(legend.show = TRUE) +  # Show legend
  osm_basemap  # Add basemap

# View the map
amk_food_map
```






